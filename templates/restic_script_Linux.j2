#!/usr/bin/env bash
# {{ ansible_managed }}
# Backup script for {{ item.src|default('stdin') }}
# Use this file to create a Backup and prune existing data with one execution.
{% if item.disable_logging is defined and item.disable_logging %}
{% set backup_output_log = "/dev/null" %}
{% set forget_output_log = "/dev/null" %}
{% set before_output_log = "/dev/null" %}
{% set notify_output_log = "/dev/null" %}
{% set result_log = "/dev/null" %}
{% set state_log = "/dev/null" %}
{% else %}
{% set backup_output_log = restic_log_dir + "/" + item.name + "-backup-output.log" %}
{% set forget_output_log = restic_log_dir + "/" + item.name + "-forget-output.log" %}
{% set before_output_log = restic_log_dir + "/" + item.name + "-before-output.log" %}
{% set notify_output_log = restic_log_dir + "/" + item.name + "-notify-output.log" %}
{% set result_log = restic_log_dir + "/" + item.name + "-result.log" %}
{% set state_log = restic_log_dir + "/" + item.name + ".state" %}
{% endif %}

{#
  Include access file
#}
# Include access file
source {{ restic_script_dir }}/access-{{ item.repo }}.sh

STATUS="NO_ERROR"
set -uo pipefail

{#
  Define Tags
#}
{% macro tags(tags) -%}
  {% if tags is defined and (tags|length>0) %}{% for tag in tags %} --tag {{ tag }}{% endfor %}{% endif %}
{%- endmacro %}
{#
  Define Keeped Tags
#}
{% macro keep_tags(tags) -%}
  {% if tags is defined and (tags|length>0) %}{% for tag in tags %} --keep-tag {{ tag }}{% endfor %}{% endif %}
{%- endmacro %}
{#
  Define Hostname
#}
{% macro hostname(h) -%}
  {% if h is defined %} --hostname {{ h }}{% endif %}
{%- endmacro %}
{#
  Define stdin filename
#}
{% macro stdin_filename(n) -%}
  {% if n is defined %} --stdin-filename {{ n }}{% endif %}
{%- endmacro %}
{#
  Define backup src list
#}
{% macro backup_src_list(item) -%}
  {% if item.src is defined -%}
    {% for src_item in item.src -%}
        {{ src_item + " " }} 
    {%- endfor %}
  {%- endif %}
{%- endmacro %}
{#
  Define pathAttribute
#}
{% macro path_attribute(repo) -%}
  {% if repo.src is defined and repo.src != None and (repo.src|length>0)  -%}
    {% for src_item in repo.src -%}
    --path {{ src_item + " " }} 
    {%- endfor %}
  {% else %}
    --path {{ repo.stdin_filename + " " }}
  {% endif %}
{%- endmacro %}
{#
  Define retention pattern
#}
{% macro retention_pattern(repo) -%}
  {% if repo.keep_last is defined and repo.keep_last != None %}--keep-last {{ item.keep_last }} \{% endif %}
  {% if repo.keep_hourly is defined and repo.keep_hourly != None %}--keep-hourly {{ item.keep_hourly }} \{% endif %}
  {% if repo.keep_daily is defined and repo.keep_daily != None %}--keep-daily {{ item.keep_daily }} \{% endif %}
  {% if repo.keep_weekly is defined and repo.keep_weekly != None %}--keep-weekly {{ item.keep_weekly }} \{% endif %}
  {% if repo.keep_monthly is defined and repo.keep_monthly != None %}--keep-monthly {{ item.keep_monthly }} \{% endif %}
  {% if repo.keep_yearly is defined and repo.keep_yearly != None %}--keep-yearly {{ item.keep_yearly }} \{% endif %}
  {% if repo.keep_within is defined and repo.keep_within != None %}--keep-within {{ item.keep_within }} \{% endif %}
  {% if repo.keep_tag is defined and (repo.keep_tag|length>0) %}{{ keep_tags(repo.keep_tag) }}{% endif %}
{%- endmacro %}
{#
  Define path
#}
{% macro path(repo) -%}
  {% if repo.src is defined and repo.src != None and (repo.src|length>0)  %}{{ repo.src }}{% else %}{{ repo.stdin_filename }}{% endif %}
{%- endmacro %}
{#
  Define exclude macro
#}
{% macro exclude(exclude) -%}
    {% if exclude.exclude_cache is defined and exclude.exclude_cache == true %}
  --exclude-cache \
    {% endif %}
    {% if exclude.exclude is defined %}
        {% for path in exclude.exclude %}
  --exclude {{ path }} \
        {% endfor %}
    {% endif %}
    {% if exclude.iexclude is defined %}
        {% for path in exclude.iexclude %}
  --iexclude {{ path }} \
        {% endfor %}
    {% endif %}
    {% if exclude.exclude_file is defined %}
        {% for path in exclude.exclude_file %}
  --exclude-file {{ path }} \
        {% endfor %}
    {% endif %}
    {% if exclude.exclude_if_present is defined %}
        {% for path in exclude.exclude_if_present %}
  --exclude-if-present {{ path }} \
        {% endfor %}
    {% endif %}
{%- endmacro %}
{#
  deletes log file if to big 
#}
{% if item.disable_logging is not defined or not item.disable_logging -%}
# deletes log file if to big (default 500 KB max) 
printf "################## cleanup result log ##################\n"
{% if item.max_result_log_size is defined -%}
MAX_LOGSIZE={{ item.max_result_log_size }}
{% else -%}
MAX_LOGSIZE=500000
{% endif %}
LOGSIZE=$(stat -c%s {{ result_log }})
echo "Size of result log is $LOGSIZE bytes."
if [[ "$LOGSIZE" -gt "$MAX_LOGSIZE" ]] 
then
  echo "Result log will be deleted."
  rm {{ result_log}}
fi

{% endif -%}
{#
  Define beforeScript execution 
#}
{% if item.before_script is defined -%}
# before script 
printf "\n\n################## before script ##################\n"
bash {{ restic_script_dir }}/{{ item.name }}-backup/before.sh |& tee {{ before_output_log }}
if [ $? -eq 0 ]
then
    echo -e "$(date -u '+%Y-%m-%d %H:%M:%S') before script:\t OK" >> {{ result_log }}
else
    echo -e "$(date -u '+%Y-%m-%d %H:%M:%S') before script:\t ERROR" >> {{ result_log }}
    STATUS="BEFORE_SCRIPT_FAILED"
fi

{% endif -%}
{#
  Define backup commands
#}
# backup command 
if [[ "$STATUS" = "NO_ERROR" ]]
then  
printf "\n\n################## backup command ##################\n"
  if [[ -z ${CRON+x} ]]; then
    MODE_TAG="--tag manual"
  else
    MODE_TAG="--tag cron"
  fi

  {% if item.stdin is defined and item.stdin == true %}
  {{ item.stdin_cmd }} | {{ restic_install_path }}/restic backup \
  --stdin $MODE_TAG \
  {{ tags(item.tags) }} \
  {{ stdin_filename(item.stdin_filename) }} \
  {% if item.exclude is defined -%}
  {{ exclude(item.exclude) }} \ 
  {% endif %}
  $@ \
  {% else %}
  {{ restic_install_path }}/restic backup {{ backup_src_list(item) }}\
  $MODE_TAG \
  {% if item.tags is defined %}
  {{ tags(item.tags) }} \ 
  {% endif %}
  {% if item.one_file_system is defined and item.one_file_system %}
  --one-file-system \ 
  {% endif %}
  {% if item.exclude is defined -%}{{ exclude(item.exclude) }}{% endif %}
  $@ \
  {% endif %}
  |& tee {{ backup_output_log }}

  if [ $? -eq 0 ]
  then
      echo -e "$(date -u '+%Y-%m-%d %H:%M:%S') backup command:\t OK" >> {{ result_log }}
  else
      echo -e "$(date -u '+%Y-%m-%d %H:%M:%S') backup command:\t ERROR" >> {{ result_log }}
      STATUS="BACKUP_FAILED"
  fi
fi

{#
  Define stdin forget commands
#}
# forget command 
if [[ "$STATUS" = "NO_ERROR" ]]
then
printf "\n\n################## forget command ##################\n"
  {{ restic_install_path }}/restic forget {{ path_attribute(item) }}\
  {{ retention_pattern(item) }}
  {% if item.prune is defined and item.prune == true %}
  --prune \
  {% endif %}
  |& tee {{ forget_output_log }}
  if [ $? -eq 0 ]
  then
      echo -e "$(date -u '+%Y-%m-%d %H:%M:%S') forget command:\t OK" >> {{ result_log }}
  else
      echo -e "$(date -u '+%Y-%m-%d %H:%M:%S') forget command:\t ERROR" >> {{ result_log }}
      STATUS="FORGET_FAILED"
  fi
fi

{#
  passiv zabbix check
#}
{% if item.passive_zabbix_check is defined %}
# passive zabbix check
printf "\n\n################## passive zabbix check ##################\n"
echo -e "$STATUS" |& tee {{ state_log }}
{% endif %}

{#
  Define notifyScript execution
#}
{% if item.notify_script is defined %}
# notify script 
printf "\n\n################## notify script ##################\n"
bash {{ restic_script_dir }}/{{ item.name }}-backup/notify.sh $STATUS |& tee {{ notify_output_log }}
if [ $? -eq 0 ]
then
    echo -e "$(date -u '+%Y-%m-%d %H:%M:%S') notify script:\t OK" >> {{ result_log }}
else
    echo -e "$(date -u '+%Y-%m-%d %H:%M:%S') notify script:\t ERROR" >> {{ result_log }}
fi
{% endif %}

{#
  Define notify zabbix execution
#}
{% if item.notify_zabbix is defined %}
# notify zabbix 
printf "\n\n################## notify zabbix ##################\n"
bash {{ restic_script_dir }}/zabbix-sender.sh -z {{ item.notify_zabbix.serverHost }} -p {{ item.notify_zabbix.serverPort }} -s {{ item.notify_zabbix.host }} -k {{ item.notify_zabbix.key }} -o $STATUS 
echo -e "$(date -u '+%Y-%m-%d %H:%M:%S') zabbix req done" >> {{ result_log }}
{% endif %}
